[["index.html", "Nick Bergeron’s Reproducible Data Science Final Project Chapter 1 About", " Nick Bergeron’s Reproducible Data Science Final Project Nick Bergeron 2023-05-01 Chapter 1 About This is a book detailing my final project in Reproducible Data Science. I will briefly detail some data checks and processing as well as some graphical explorations. My data comes from sampling plots in Northern Yellowstone established by Dr. Eric Larsen from University if Wisconsin Stevens Point in 1999. This data is being used to examine changes in aspen after the reintroduction of wolves in Yellowstone National Park. "],["creating-my-project-databse-using-sqlite.html", "Chapter 2 Creating My Project Databse Using SQLite 2.1 Create aspen_plot table 2.2 Create trees table 2.3 Create measurements table", " Chapter 2 Creating My Project Databse Using SQLite First, I need to load packages DBI and RSQLite. Then I need establish a connection to my database in R. This step will create the specified database if it does not exist. library(DBI) library(RSQLite) library(tidyverse) ms_thesis_db &lt;- dbConnect(RSQLite::SQLite(), &quot;ms_thesis.db&quot;) 2.1 Create aspen_plot table I need to first recreate the table in R to mirror my .csv file. This allows me to then populate the table with data from my .csv file. I have to specify the name of each column as well as data type and necessary constraints. The query at the end confirms that I have populated the table correctly. dbExecute(ms_thesis_db, &quot;CREATE TABLE aspen_plots ( plot_id varchar PRIMARY KEY, utm_x_start double, utm_y_start double, utm_x_end double, utm_y_end double) ;&quot;) aspen_plots &lt;- read.csv(&quot;../../processed_data/Aspen_Transect-GPS-Points_refined_final.csv&quot;, header = T) dplyr::glimpse(aspen_plots) dbWriteTable(ms_thesis_db, &quot;aspen_plots&quot;, aspen_plots, append = TRUE) dbGetQuery(ms_thesis_db, &quot;SELECT * FROM aspen_plots LIMIT 10;&quot;) 2.2 Create trees table Same process as the aspen_plot data, but this time I need to create and AUTOINCREMENT Primary Key. This is a simple process that is done by adding PRIMARY KEY AUTOINCREMENT to the tree_id column. This is necessary since I do not have a unique identifier in my trees table. To populate the table, I first need to add the tree_id column, then import the rest of the columns from my .csv. dbExecute(ms_thesis_db, &quot;CREATE TABLE trees ( tree_id INTEGER PRIMARY KEY AUTOINCREMENT, tree_number integer, plot_id integer NOT NULL, year integer, FOREIGN KEY (plot_id) REFERENCES aspen_plots(plot_id) );&quot;) trees &lt;- read.csv(&quot;../../processed_data/2022_aspen_data_suckers_tree.csv&quot;, header = TRUE) trees$tree_id &lt;- 1:nrow(trees) dplyr::glimpse(trees) library(dplyr) trees &lt;- select(trees, tree_id, tree_number, plot_id, year) dbWriteTable(ms_thesis_db, &quot;trees&quot;, trees, append = TRUE) dbGetQuery(ms_thesis_db, &quot;SELECT * FROM trees LIMIT 10;&quot;) 2.3 Create measurements table This is the same process as the trees table. I populated the tree_id column using the trees table. INSTER INTO was not working for me so I used a workaround that involved selecting the specific tree_id column from trees and using cbind to add it to the measurements table. dbExecute(ms_thesis_db, &quot;CREATE TABLE measurements ( measurement_id INTEGER PRIMARY KEY AUTOINCREMENT, tree_id integer, height float CHECK (height&lt;=1000), cag float CHECK (cag&lt;=300), dbh float CHECK (dbh &lt;=20), winter_browse integer CHECK (winter_browse &lt;=1), summer_browse integer CHECK (summer_browse &lt;=1), new_sucker integer CHECK (new_sucker &lt;=1), FOREIGN KEY (tree_id) REFERENCES trees (tree_id) );&quot;) measurements &lt;- read.csv(&quot;../../processed_data/2022_aspen_data_suckers_measurements_all.csv&quot;, header = TRUE) tree_id&lt;- dbGetQuery(conn = ms_thesis_db, statement = &quot;SELECT tree_id FROM trees;&quot;) measurements &lt;- cbind(measurements, tree_id) measurements$measurement_id &lt;- 1:nrow(measurements) measurements &lt;- select(measurements, measurement_id, tree_id, height, cag, dbh,winter_browse, summer_browse, new_sucker) dbWriteTable(ms_thesis_db, &quot;measurements&quot;, measurements, append = TRUE) dbGetQuery(ms_thesis_db, &quot;SELECT * FROM measurements LIMIT 10&quot;) This concludes the the first chapter of my Reproducible Data Science project book. "],["data-checks-and-processing.html", "Chapter 3 Data Checks and Processing 3.1 Data checks 3.2 Create a table to use for graphs", " Chapter 3 Data Checks and Processing 3.1 Data checks Before conducting any analyses, I must check for data entry errors and refine the data to exclude temporary minimum height placeholders to ensure I only work with actual measurements. 3.1.1 Aspen Plots anyNA(aspen_plots) which(is.na(aspen_plots)) range(aspen_plots$utm_x_start) range(aspen_plots$utm_y_start) range(aspen_plots$utm_x_end, na.rm = TRUE) range(aspen_plots$utm_y_end, na.rm = TRUE) length(unique(aspen_plots$plot_id)) Check table aspen_plots. anyNA was used to check for NA’s, range was used to determine if I mixed up coordinates, and length and unique were used to ensure all plots were accounted for. I ended up needing to fix some coordinates that had the latitude and longitude swapped. 3.1.2 Trees anyNA(trees) range(trees$tree_id) range(trees$tree_number) range(trees$plot_id) range(trees$year) Similar to before, I checked the data for errors using the same methods. I found that tree numbers for 2020 were not put into the .csv, rectified the original .csv file. 3.1.3 Measurements range(measurements$height, na.rm = TRUE) range(measurements$cag, na.rm = TRUE) range(measurements$dbh, na.rm = TRUE) unique(measurements$winter_browse, na.rm = TRUE) unique(measurements$summer_browse,na.rm = TRUE) unique(measurements$new_sucker, na.rm = TRUE) sort(unique(tall_ya$height), decreasing = TRUE) flitered_measurements &lt;- filter(measurements, height &lt; 550) %&gt;% filter(!(height %in% c(300,350,400,450, 500, 550))) In our data, we use minimum estimates for heights that we can’t measure. I want to filter those out as they are not actual measurements, just estimates. These heights are 300, 350, 400, 450, 500, 550. I will also remove all measurements over 550 as those are either estimates or generated from a dbh formula as it is not possible to measure a 550cm tree with a meter stick. To do this, I selected all measurements under 550 cm, and then selected the opposite including the placeholders above. This removed 1554 rows that had minimums. 3.2 Create a table to use for graphs young_aspen &lt;- flitered_measurements %&gt;% left_join(trees, by = &quot;tree_id&quot;) %&gt;% select(height, cag, year, plot_id, tree_id, winter_browse) write.csv(young_aspen, file = &quot;young_aspen.csv&quot;, row.names = FALSE) Here I join my filtered measurements to the trees table and select the columns height, cag, year, plot_id, tree_id, and winter_browse. I saved this table as a .csv to use when graphically exploring my data in the next chapter. "],["graphically-exploring-my-data.html", "Chapter 4 Graphically exploring my data 4.1 Exploring my data graphically 4.2 Conclusions", " Chapter 4 Graphically exploring my data 4.1 Exploring my data graphically Here I will create a number of graphs looking at trends in my data through time. 4.1.1 Aspen Height Through Time library(tidyverse) young_aspen &lt;- read.csv(&quot;young_aspen.csv&quot;, header = TRUE) whisker_data_height &lt;- young_aspen %&gt;% group_by(year) %&gt;% summarize(ymin = min(height), ymax = max(height)) errorbars_height &lt;- young_aspen %&gt;% left_join(whisker_data_height, by = &quot;year&quot;) ggplot(young_aspen, aes(x = factor(year), y = height)) + geom_boxplot(outlier.shape = NA, fill = &quot;orange&quot;, alpha = 0.7) + ylim(0,600) + geom_errorbar(data =errorbars_height, aes(x = factor(year), ymin = ymin, ymax = ymax), color = &quot;black&quot;, width = 0.3) + labs(x = &quot;Year&quot;, y = &quot;Young Aspen Height (cm)&quot;, title = &quot;Aspen Heights in Northern Yellowston from 1999 to 2022&quot;) + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) This graph shows boxplots for each year side by side. The whiskers represent all of the data, including outliers. This isn’t necesasrly proper, but it was fun to figure out and looks much more aesteically pleasing as there are many upper outliers and the whiskers would not generate the horizontal end lines. 4.1.2 Current Annual Growth Through Time young_aspen_filtered &lt;- young_aspen %&gt;% filter(year &gt; 2003) %&gt;% na.omit(young_aspen_filtered$cag) whisker_data_cag &lt;- young_aspen_filtered %&gt;% group_by(year) %&gt;% summarize(ymin = min(cag), ymax = max(cag)) errorbars_cag &lt;- young_aspen_filtered %&gt;% left_join(whisker_data_cag, by = &quot;year&quot;) ggplot(young_aspen_filtered, aes(x = factor(year), y = cag)) + geom_boxplot(outlier.shape = NA, coef = Inf, fill = &quot;orange&quot;, alpha = 0.7) + geom_errorbar(data = errorbars_cag %&gt;% filter(year &gt; 2003), aes(x = factor(year), ymin = ymin, ymax = ymax), color = &quot;black&quot;, width = 0.3) + labs(x = &quot;Year&quot;, y = &quot;Young Aspen cag (cm)&quot;, title = &quot;Aspen Current Annual Growth in Northern Yellowstone from 2004 to 2022&quot;) + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) Similar graph as above, but depicting cag through time. 4.1.3 Browsing Percent Through Time young_aspen %&gt;% group_by(year) %&gt;% summarize(browsing_percentage = mean(winter_browse)*100) %&gt;% ggplot(aes(x = year, y = browsing_percentage, color = &quot;orange&quot;)) + geom_point() + labs(x = &quot;Year&quot;,y = &quot;Mean Browsing (%)&quot;, title = &quot; Aspen Winter Browsing Pressure From 1999 to 2022&quot;) + theme_bw() + guides(color = FALSE) Here we have a graph that show how the percentage of young aspen browsed in each plot has decreased through the years. 4.2 Conclusions 4.2.1 Height We can see that the mean height of young aspen has increased since the plots were established in 1999. Interestingly, their median height is increasing at a much slower rate than the variance. This is likely a result of the taller young aspen escaping preferred browsing heights, facilitating increased growth as they experience less browsing pressure and have greater access to resources like sunlight. It is curious that it seems like aspen heights have stopped increasing since about 2014. I would have expected heights to continue to increase as browsing pressure decreased. 4.2.2 Current Annual Growth Cag has stayed relatively the same since we started measuring it in 2004. This result was surprising as I would expect annual growth to increase as browsing pressure decreases. This is a difficult result to understand. It is possible that young aspen are growing at the maximum rate achievable in the northern range, and variation is driven by climatic variables and not browsing. It could also potentially mean that the climatic warming we are seeing has caused current annual growth to slow, yet we are not seeing a decrease as it is buffered by reduced browsing pressure. 4.2.3 Browsing Pressure It is not surprising that browsing pressure has decreased in recent years. Elk numbers are down due to increases in predators, and antlerless hunts that were prevalent until the last decade. ``` "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
